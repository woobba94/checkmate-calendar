name: Manual Deploy to Vercel

on:
  workflow_dispatch:
    inputs:
      app:
        description: 'target (landing / calendar)'
        required: true
        type: choice
        options: [landing, calendar]
      branch:
        description: 'branch (main/dev)'
        default: 'main'
        required: true
        type: choice
        options: [main, dev]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Context
        shell: bash
        run: |
          echo "APP=${{ github.event.inputs.app }}"
          echo "BRANCH=${{ github.event.inputs.branch }}"
          echo "PWD=$(pwd)"
          ls -la

      # -------- landing --------
      - name: Prepare deps (landing)
        if: ${{ github.event.inputs.app == 'landing' }}
        shell: bash
        run: |
          echo "[landing] node/npm/vercel versions"
          node -v || true
          npm -v || true
          npx vercel --version || true
          echo "[landing] npm ci in repo root if needed (adjust as your monorepo requires)"
          npm ci || true
          echo "[landing] optional: workspace/local install"
          if [ -f apps/landing/package.json ]; then (cd apps/landing && npm ci || true); fi

      - name: vercel pull (landing) @ repo root
        if: ${{ github.event.inputs.app == 'landing' }}
        shell: bash
        working-directory: .
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
        run: |
          echo "[landing] vercel pull environment=$([ '${{ github.event.inputs.branch }}' = 'main' ] && echo production || echo preview)"
          npx vercel pull --yes \
            --environment=$([ '${{ github.event.inputs.branch }}' = 'main' ] && echo production || echo preview) \
            --token=${{ secrets.VERCEL_TOKEN }}
          echo "[landing] pulled files in .vercel:"
          ls -la .vercel || true
          test -s .vercel/project.json && echo ".vercel/project.json exists (>0 bytes)" || { echo "project.json missing"; exit 1; }

      - name: vercel build (landing) @ repo root
        if: ${{ github.event.inputs.app == 'landing' }}
        shell: bash
        working-directory: .
        run: |
          echo "[landing] vercel build start"
          if [ "${{ github.event.inputs.branch }}" = "main" ]; then
            npx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            npx vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
          ls -la .vercel/output || true
          du -sh .vercel/output || true

      - name: vercel deploy (landing) @ repo root
        if: ${{ github.event.inputs.app == 'landing' }}
        shell: bash
        working-directory: .
        run: |
          if [ "${{ github.event.inputs.branch }}" = "main" ]; then
            echo "[landing] deploy as PRODUCTION"
            npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --prod
          else
            echo "[landing] deploy as PREVIEW"
            npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi

      # -------- calendar --------
      - name: Prepare deps (calendar)
        if: ${{ github.event.inputs.app == 'calendar' }}
        shell: bash
        run: |
          echo "[calendar] node/npm/vercel versions"
          node -v || true
          npm -v || true
          npx vercel --version || true
          echo "[calendar] npm ci in repo root if needed (adjust as your monorepo requires)"
          npm ci || true
          echo "[calendar] optional: workspace/local install"
          if [ -f apps/calendar/package.json ]; then (cd apps/calendar && npm ci || true); fi

      - name: vercel pull (calendar) @ repo root
        if: ${{ github.event.inputs.app == 'calendar' }}
        shell: bash
        working-directory: .
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_CALENDAR }}
        run: |
          echo "[calendar] vercel pull environment=$([ '${{ github.event.inputs.branch }}' = 'main' ] && echo production || echo preview)"
          npx vercel pull --yes \
            --environment=$([ '${{ github.event.inputs.branch }}' = 'main' ] && echo production || echo preview) \
            --token=${{ secrets.VERCEL_TOKEN }}
          echo "[calendar] pulled files in .vercel:"
          ls -la .vercel || true
          test -s .vercel/project.json && echo ".vercel/project.json exists (>0 bytes)" || { echo "project.json missing"; exit 1; }

      - name: vercel build (calendar) @ repo root
        if: ${{ github.event.inputs.app == 'calendar' }}
        shell: bash
        working-directory: .
        run: |
          echo "[calendar] vercel build start"
          if [ "${{ github.event.inputs.branch }}" = "main" ]; then
            npx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            npx vercel build --token=${{ secrets.VERCEL_TOKEN }}
          fi
          ls -la .vercel/output || true
          du -sh .vercel/output || true

      - name: vercel deploy (calendar) @ repo root
        if: ${{ github.event.inputs.app == 'calendar' }}
        shell: bash
        working-directory: .
        run: |
          if [ "${{ github.event.inputs.branch }}" = "main" ]; then
            echo "[calendar] deploy as PRODUCTION"
            npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} --prod
          else
            echo "[calendar] deploy as PREVIEW"
            npx vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
          fi
